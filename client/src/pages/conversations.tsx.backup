import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useAuth } from "../hooks/use-auth";
import { useToast } from "../hooks/use-toast";
import { Button } from "../components/ui/button";
import { Input } from "../components/ui/input";
import { Label } from "../components/ui/label";
import { Textarea } from "../components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "../components/ui/card";
import { Badge } from "../components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../components/ui/tabs";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "../components/ui/dialog";
import { Checkbox } from "../components/ui/checkbox";
import Sidebar from "../components/layout/sidebar";
import Header from "../components/layout/header";
import { 
  Upload, 
  MessageCircle, 
  User, 
  Bot, 
  Clock, 
  CheckCircle, 
  Users,
  CheckSquare,
  Square,
  FileText
} from "lucide-react";
import type { Conversation, ConversationMessage, User as UserType, StyleTag } from "../../../shared/schema";

interface ConversationUpload {
  title: string;
  description: string;
  customerType: string;
  urgencyLevel: string;
  category: string;
  messages: {
    messageType: 'user' | 'agent';
    speakerRole: string;
    originalText: string;
    emotionalTone?: string;
  }[];
}

export default function Conversations() {
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState("upload");
  const [showUploadDialog, setShowUploadDialog] = useState(false);
  const [showAssignDialog, setShowAssignDialog] = useState(false);
  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);

  // Upload form state
  const [uploadForm, setUploadForm] = useState<ConversationUpload>({
    title: "",
    description: "",
    customerType: "new",
    urgencyLevel: "medium",
    category: "general",
    messages: []
  });
  const [conversationText, setConversationText] = useState("");

  // Assignment form state
  const [selectedTranslator, setSelectedTranslator] = useState<number | null>(null);
  const [selectedStyle, setSelectedStyle] = useState<number | null>(null);

  // Bulk assignment state
  const [selectedConversations, setSelectedConversations] = useState<number[]>([]);
  const [showBulkAssignDialog, setShowBulkAssignDialog] = useState(false);
  const [bulkTranslator, setBulkTranslator] = useState<number | null>(null);
  const [bulkStyle, setBulkStyle] = useState<number | null>(null);

  // Bulk upload state
  const [showBulkUploadDialog, setShowBulkUploadDialog] = useState(false);
  const [bulkConversationText, setBulkConversationText] = useState("");
  const [parsedConversations, setParsedConversations] = useState<Array<{
    id: string;
    title: string;
    description: string;
    messages: ConversationUpload['messages'];
    selected: boolean;
  }>>([]);
  const [bulkUploadSettings, setBulkUploadSettings] = useState({
    category: "general",
    customerType: "new",
    urgencyLevel: "medium"
  });

  // Fetch data
  const { data: conversations = [] } = useQuery<Conversation[]>({
    queryKey: ["/api/conversations"],
  });

  const { data: translators = [] } = useQuery<UserType[]>({
    queryKey: ["/api/users"],
    select: (users) => users.filter(u => u.role === "translator"),
  });

  const { data: styleTags = [] } = useQuery<StyleTag[]>({
    queryKey: ["/api/style-tags"],
  });

  // Parse conversation text into messages
  const parseConversationText = (text: string) => {
    const lines = text.split('\n').filter(line => line.trim());
    const messages: ConversationUpload['messages'] = [];
    
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed.startsWith('عميل:') || trimmed.startsWith('Customer:') || trimmed.startsWith('المستخدم:')) {
        messages.push({
          messageType: 'user',
          speakerRole: 'customer',
          originalText: trimmed.replace(/^(عميل:|Customer:|المستخدم:)\s*/, ''),
          emotionalTone: 'neutral'
        });
      } else if (trimmed.startsWith('وكيل:') || trimmed.startsWith('Agent:') || trimmed.startsWith('الدعم:')) {
        messages.push({
          messageType: 'agent',
          speakerRole: 'support_agent',
          originalText: trimmed.replace(/^(وكيل:|Agent:|الدعم:)\s*/, '')
        });
      }
    }
    
    return messages;
  };

  // Parse multiple conversations from bulk text
  const parseBulkConversations = (text: string) => {
    // Split by conversation separators (empty lines, "---", "===", or "محادثة")
    const conversationSeparators = /\n\s*\n|---|===|محادثة \d+|conversation \d+/gi;
    const conversationBlocks = text.split(conversationSeparators).filter(block => block.trim());
    
    const parsed = conversationBlocks.map((block, index) => {
      const messages = parseConversationText(block);
      if (messages.length === 0) return null;
      
      // Generate title from first user message or use default
      const firstUserMessage = messages.find(m => m.messageType === 'user');
      const title = firstUserMessage 
        ? firstUserMessage.originalText.substring(0, 50) + (firstUserMessage.originalText.length > 50 ? '...' : '')
        : `محادثة ${index + 1}`;
      
      // Generate description from conversation content
      const userCount = messages.filter(m => m.messageType === 'user').length;
      const agentCount = messages.filter(m => m.messageType === 'agent').length;
      const description = `محادثة تحتوي على ${userCount} رسائل عميل و ${agentCount} رسائل وكيل`;
      
      return {
        id: `temp-${Date.now()}-${index}`,
        title,
        description,
        messages,
        selected: true // Default to selected
      };
    }).filter(Boolean) as Array<{
      id: string;
      title: string;
      description: string;
      messages: ConversationUpload['messages'];
      selected: boolean;
    }>;
    
    return parsed;
  };

  // Bulk upload mutation
  const bulkUploadMutation = useMutation({
    mutationFn: async (conversations: Array<{
      title: string;
      description: string;
      messages: ConversationUpload['messages'];
    }>) => {
      const results = [];
      for (const conv of conversations) {
        const response = await fetch('/api/conversations', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            ...conv,
            category: bulkUploadSettings.category,
            customerType: bulkUploadSettings.customerType,
            urgencyLevel: bulkUploadSettings.urgencyLevel
          })
        });
        
        if (!response.ok) {
          throw new Error(`Failed to upload conversation: ${conv.title}`);
        }
        
        results.push(await response.json());
      }
      return results;
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['conversations'] });
      toast.success(`تم رفع ${data.length} محادثة بنجاح`);
      setShowBulkUploadDialog(false);
      setBulkConversationText("");
      setParsedConversations([]);
    },
    onError: (error) => {
      toast.error(`خطأ في رفع المحادثات: ${error.message}`);
    }
  });

  // Handle bulk upload
  const handleBulkUpload = () => {
    const selectedConvs = parsedConversations.filter(conv => conv.selected);
    if (selectedConvs.length === 0) {
      toast.error("يرجى اختيار محادثة واحدة على الأقل");
      return;
    }
    
    bulkUploadMutation.mutate(selectedConvs.map(conv => ({
      title: conv.title,
      description: conv.description,
      messages: conv.messages
    })));
  };

  // Handle parsing bulk conversations
  const handleParseBulkConversations = () => {
    if (!bulkConversationText.trim()) {
      toast.error("يرجى إدخال نص المحادثات");
      return;
    }
    
    const parsed = parseBulkConversations(bulkConversationText);
    if (parsed.length === 0) {
      toast.error("لم يتم العثور على محادثات صالحة في النص المدخل");
      return;
    }
    
    setParsedConversations(parsed);
    toast.success(`تم تحليل ${parsed.length} محادثة`);
  };

  // Toggle parsed conversation selection
  const toggleParsedConversationSelection = (id: string) => {
    setParsedConversations(prev => 
      prev.map(conv => 
        conv.id === id ? { ...conv, selected: !conv.selected } : conv
      )
    );
  };

  // Select all parsed conversations
  const selectAllParsedConversations = () => {
    setParsedConversations(prev => prev.map(conv => ({ ...conv, selected: true })));
  };

  // Clear parsed conversation selection
  const clearParsedSelection = () => {
    setParsedConversations(prev => prev.map(conv => ({ ...conv, selected: false })));
  };

  // Upload conversation mutation
  const uploadMutation = useMutation({
    mutationFn: async (data: ConversationUpload) => {
      const response = await fetch("/api/conversations", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });
      if (!response.ok) throw new Error("Failed to upload conversation");
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/conversations"] });
      toast({ title: "تم رفع المحادثة بنجاح", description: "تم رفع المحادثة وهي جاهزة للتعيين" });
      setShowUploadDialog(false);
      setUploadForm({
        title: "",
        description: "",
        customerType: "new",
        urgencyLevel: "medium",
        category: "general",
        messages: []
      });
      setConversationText("");
    },
    onError: () => {
      toast({ title: "خطأ", description: "فشل في رفع المحادثة", variant: "destructive" });
    },
  });

  // Assign conversation mutation
  const assignMutation = useMutation({
    mutationFn: async ({ conversationId, translatorId, styleTagId }: { 
      conversationId: number; 
      translatorId: number; 
      styleTagId: number;
    }) => {
      const response = await fetch(`/api/conversations/${conversationId}/assign`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ translatorId, styleTagId }),
      });
      if (!response.ok) throw new Error("Failed to assign conversation");
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/conversations"] });
      toast({ title: "تم تعيين المحادثة بنجاح", description: "تم تعيين المحادثة للمترجم مع النمط المحدد" });
      setShowAssignDialog(false);
      setSelectedConversation(null);
      setSelectedTranslator(null);
      setSelectedStyle(null);
    },
    onError: () => {
      toast({ title: "خطأ", description: "فشل في تعيين المحادثة", variant: "destructive" });
    },
  });

  // Bulk assign conversations mutation
  const bulkAssignMutation = useMutation({
    mutationFn: async ({ conversationIds, translatorId, styleTagId }: { 
      conversationIds: number[]; 
      translatorId: number; 
      styleTagId: number;
    }) => {
      const promises = conversationIds.map(id => 
        fetch(`/api/conversations/${id}/assign`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ translatorId, styleTagId }),
        })
      );
      
      const responses = await Promise.all(promises);
      const failedAssignments = responses.filter(r => !r.ok);
      
      if (failedAssignments.length > 0) {
        throw new Error(`Failed to assign ${failedAssignments.length} conversations`);
      }
      
      return { assigned: conversationIds.length };
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ["/api/conversations"] });
      toast({ 
        title: "تم تعيين المحادثات بنجاح", 
        description: `تم تعيين ${data.assigned} محادثة للمترجم المحدد` 
      });
      setShowBulkAssignDialog(false);
      setSelectedConversations([]);
      setBulkTranslator(null);
      setBulkStyle(null);
    },
    onError: (error: Error) => {
      toast({ 
        title: "خطأ في التعيين الجماعي", 
        description: error.message, 
        variant: "destructive" 
      });
    },
  });

  const handleUpload = () => {
    const messages = parseConversationText(conversationText);
    if (messages.length === 0) {
      toast({ title: "خطأ", description: "يرجى إدخال محادثة صحيحة", variant: "destructive" });
      return;
    }

    const userMessages = messages.filter(m => m.messageType === 'user').length;
    const agentMessages = messages.filter(m => m.messageType === 'agent').length;

    uploadMutation.mutate({
      ...uploadForm,
      messages: messages.map((msg, index) => ({
        ...msg,
        messageOrder: index + 1
      }))
    });
  };

  const handleAssign = () => {
    if (!selectedConversation || !selectedTranslator || !selectedStyle) {
      toast({ title: "خطأ", description: "يرجى اختيار جميع الحقول المطلوبة", variant: "destructive" });
      return;
    }

    assignMutation.mutate({
      conversationId: selectedConversation.id,
      translatorId: selectedTranslator,
      styleTagId: selectedStyle,
    });
  };

  const handleBulkAssign = () => {
    if (selectedConversations.length === 0 || !bulkTranslator || !bulkStyle) {
      toast({ title: "خطأ", description: "يرجى اختيار المحادثات والمترجم والنمط", variant: "destructive" });
      return;
    }

    bulkAssignMutation.mutate({
      conversationIds: selectedConversations,
      translatorId: bulkTranslator,
      styleTagId: bulkStyle,
    });
  };

  const toggleConversationSelection = (conversationId: number) => {
    setSelectedConversations(prev => 
      prev.includes(conversationId) 
        ? prev.filter(id => id !== conversationId)
        : [...prev, conversationId]
    );
  };

  const selectAllPendingConversations = () => {
    const pendingIds = conversations
      .filter(c => c.status === 'pending')
      .map(c => c.id);
    setSelectedConversations(pendingIds);
  };

  const clearSelection = () => {
    setSelectedConversations([]);
  };

  const getStatusBadge = (status: string) => {
    const statusMap = {
      pending: { label: "في الانتظار", variant: "secondary" as const },
      assigned: { label: "معين", variant: "default" as const },
      in_progress: { label: "قيد التنفيذ", variant: "default" as const },
      completed: { label: "مكتمل", variant: "default" as const },
      reviewed: { label: "تمت المراجعة", variant: "default" as const },
    };
    return statusMap[status as keyof typeof statusMap] || { label: status, variant: "secondary" as const };
  };

  const getUrgencyColor = (urgency: string) => {
    const colors = {
      low: "text-green-600",
      medium: "text-yellow-600", 
      high: "text-orange-600",
      urgent: "text-red-600"
    };
    return colors[urgency as keyof typeof colors] || "text-gray-600";
  };

  return (
    <div className="container mx-auto p-3 sm:p-6" dir="rtl">
      <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-6 gap-4">
        <div>
          <h1 className="text-2xl sm:text-3xl font-bold">إدارة المحادثات</h1>
          <p className="text-muted-foreground text-sm sm:text-base">رفع وتعيين محادثات دعم العملاء للترجمة من العربية إلى الحسانية</p>
        </div>
        <div className="flex gap-2">
          <Dialog open={showUploadDialog} onOpenChange={setShowUploadDialog}>
            <DialogTrigger asChild>
              <Button className="w-full sm:w-auto">
                <Upload className="ml-2 h-4 w-4" />
                رفع محادثة جديدة
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-[95vw] sm:max-w-2xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>رفع محادثة دعم عملاء</DialogTitle>
              <DialogDescription>
                قم برفع محادثة بين عميل ووكيل دعم لترجمة رسائل العميل فقط إلى الحسانية
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="title">عنوان المحادثة</Label>
                  <Input
                    id="title"
                    value={uploadForm.title}
                    onChange={(e) => setUploadForm(prev => ({ ...prev, title: e.target.value }))}
                    placeholder="مثال: مشكلة في الفوترة"
                  />
                </div>
                <div>
                  <Label htmlFor="category">الفئة</Label>
                  <Select value={uploadForm.category} onValueChange={(value) => setUploadForm(prev => ({ ...prev, category: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="billing">فوترة</SelectItem>
                      <SelectItem value="technical">تقني</SelectItem>
                      <SelectItem value="complaint">شكوى</SelectItem>
                      <SelectItem value="inquiry">استفسار</SelectItem>
                      <SelectItem value="general">عام</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="customerType">نوع العميل</Label>
                  <Select value={uploadForm.customerType} onValueChange={(value) => setUploadForm(prev => ({ ...prev, customerType: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="new">جديد</SelectItem>
                      <SelectItem value="returning">عائد</SelectItem>
                      <SelectItem value="vip">مميز</SelectItem>
                      <SelectItem value="premium">بريميوم</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="urgency">مستوى الأولوية</Label>
                  <Select value={uploadForm.urgencyLevel} onValueChange={(value) => setUploadForm(prev => ({ ...prev, urgencyLevel: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">منخفض</SelectItem>
                      <SelectItem value="medium">متوسط</SelectItem>
                      <SelectItem value="high">عالي</SelectItem>
                      <SelectItem value="urgent">عاجل</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label htmlFor="description">وصف المحادثة</Label>
                <Textarea
                  id="description"
                  value={uploadForm.description}
                  onChange={(e) => setUploadForm(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="وصف مختصر للمحادثة..."
                />
              </div>

              <div>
                <Label htmlFor="conversation">نص المحادثة</Label>
                <Textarea
                  id="conversation"
                  value={conversationText}
                  onChange={(e) => setConversationText(e.target.value)}
                  placeholder={`مثال:
عميل: مرحباً، لدي مشكلة في فاتورتي
وكيل: مرحباً بك، كيف يمكنني مساعدتك؟
عميل: الفاتورة أعلى من المعتاد
وكيل: دعني أتحقق من حسابك...`}
                  rows={8}
                />
                <p className="text-sm text-muted-foreground mt-1">
                  استخدم "عميل:" أو "وكيل:" في بداية كل رسالة
                </p>
              </div>

              <div className="flex justify-end gap-2">
                <Button variant="outline" onClick={() => setShowUploadDialog(false)}>
                  إلغاء
                </Button>
                <Button onClick={handleUpload} disabled={uploadMutation.isPending}>
                  {uploadMutation.isPending ? "جاري الرفع..." : "رفع المحادثة"}
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
        
        <Dialog open={showBulkUploadDialog} onOpenChange={setShowBulkUploadDialog}>
          <DialogTrigger asChild>
            <Button variant="outline" className="w-full sm:w-auto">
              <FileText className="ml-2 h-4 w-4" />
              رفع محادثات متعددة
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-[95vw] sm:max-w-4xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>رفع محادثات متعددة</DialogTitle>
              <DialogDescription>
                الصق عدة محادثات في النص أدناه وسيتم فصلها تلقائياً. يمكنك بعدها اختيار المحادثات التي تريد رفعها.
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              {/* Bulk Upload Settings */}
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 p-4 bg-muted/50 rounded-lg">
                <div>
                  <Label htmlFor="bulk-category">الفئة الافتراضية</Label>
                  <Select value={bulkUploadSettings.category} onValueChange={(value) => setBulkUploadSettings(prev => ({ ...prev, category: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="billing">فوترة</SelectItem>
                      <SelectItem value="technical">تقني</SelectItem>
                      <SelectItem value="complaint">شكوى</SelectItem>
                      <SelectItem value="inquiry">استفسار</SelectItem>
                      <SelectItem value="general">عام</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="bulk-customer-type">نوع العميل الافتراضي</Label>
                  <Select value={bulkUploadSettings.customerType} onValueChange={(value) => setBulkUploadSettings(prev => ({ ...prev, customerType: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="new">جديد</SelectItem>
                      <SelectItem value="returning">عائد</SelectItem>
                      <SelectItem value="vip">مميز</SelectItem>
                      <SelectItem value="premium">بريميوم</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="bulk-urgency">مستوى الأولوية الافتراضي</Label>
                  <Select value={bulkUploadSettings.urgencyLevel} onValueChange={(value) => setBulkUploadSettings(prev => ({ ...prev, urgencyLevel: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">منخفض</SelectItem>
                      <SelectItem value="medium">متوسط</SelectItem>
                      <SelectItem value="high">عالي</SelectItem>
                      <SelectItem value="urgent">عاجل</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Bulk Text Input */}
              <div>
                <Label htmlFor="bulk-conversation">نص المحادثات المتعددة</Label>
                <Textarea
                  id="bulk-conversation"
                  value={bulkConversationText}
                  onChange={(e) => setBulkConversationText(e.target.value)}
                  placeholder={`الصق المحادثات هنا. يمكن فصلها بـ:
- سطر فارغ
- "---" أو "==="
- "محادثة 1" أو "conversation 1"

مثال:
عميل: مرحباً، لدي مشكلة في فاتورتي
وكيل: مرحباً بك، كيف يمكنني مساعدتك؟

---

عميل: أريد إلغاء اشتراكي
وكيل: سأساعدك في ذلك`}
                  rows={10}
                />
                <div className="flex justify-between items-center mt-2">
                  <p className="text-sm text-muted-foreground">
                    استخدم "عميل:" أو "وكيل:" في بداية كل رسالة
                  </p>
                  <Button 
                    onClick={handleParseBulkConversations}
                    variant="outline"
                    size="sm"
                    disabled={!bulkConversationText.trim()}
                  >
                    تحليل المحادثات
                  </Button>
                </div>
              </div>

              {/* Parsed Conversations */}
              {parsedConversations.length > 0 && (
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-semibold">المحادثات المحللة ({parsedConversations.length})</h3>
                    <div className="flex gap-2">
                      <Button onClick={selectAllParsedConversations} variant="outline" size="sm">
                        تحديد الكل
                      </Button>
                      <Button onClick={clearParsedSelection} variant="outline" size="sm">
                        إلغاء التحديد
                      </Button>
                    </div>
                  </div>
                  
                  <div className="max-h-60 overflow-y-auto space-y-2">
                    {parsedConversations.map((conv) => (
                      <div key={conv.id} className={`p-3 border rounded-lg ${conv.selected ? 'bg-primary/5 border-primary' : 'bg-background'}`}>
                        <div className="flex items-start gap-3">
                          <Checkbox
                            checked={conv.selected}
                            onCheckedChange={() => toggleParsedConversationSelection(conv.id)}
                            className="mt-1"
                          />
                          <div className="flex-1">
                            <h4 className="font-medium">{conv.title}</h4>
                            <p className="text-sm text-muted-foreground">{conv.description}</p>
                            <p className="text-xs text-muted-foreground mt-1">
                              {conv.messages.length} رسائل
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end gap-2">
                <Button variant="outline" onClick={() => setShowBulkUploadDialog(false)}>
                  إلغاء
                </Button>
                {parsedConversations.length > 0 && (
                  <Button 
                    onClick={handleBulkUpload} 
                    disabled={bulkUploadMutation.isPending || parsedConversations.filter(c => c.selected).length === 0}
                  >
                    {bulkUploadMutation.isPending 
                      ? "جاري الرفع..." 
                      : `رفع المحادثات المحددة (${parsedConversations.filter(c => c.selected).length})`
                    }
                  </Button>
                )}
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="upload">المحادثات المرفوعة</TabsTrigger>
          <TabsTrigger value="assigned">المحادثات المعينة</TabsTrigger>
          <TabsTrigger value="completed">المحادثات المكتملة</TabsTrigger>
        </TabsList>

        <TabsContent value="upload" className="space-y-4">
          {/* Bulk Selection Controls */}
          {conversations.filter(c => c.status === 'pending').length > 0 && (
            <div className="flex flex-col sm:flex-row gap-3 p-4 bg-muted/50 rounded-lg">
              <div className="flex items-center gap-2">
                <Checkbox
                  checked={selectedConversations.length === conversations.filter(c => c.status === 'pending').length}
                  onCheckedChange={(checked) => {
                    if (checked) {
                      selectAllPendingConversations();
                    } else {
                      clearSelection();
                    }
                  }}
                />
                <span className="text-sm">
                  تحديد الكل ({selectedConversations.length} من {conversations.filter(c => c.status === 'pending').length})
                </span>
              </div>
              
              {selectedConversations.length > 0 && (
                <div className="flex gap-2">
                  <Button
                    onClick={() => setShowBulkAssignDialog(true)}
                    size="sm"
                    className="flex items-center gap-2"
                  >
                    <Users className="h-4 w-4" />
                    تعيين المحدد ({selectedConversations.length})
                  </Button>
                  <Button
                    onClick={clearSelection}
                    variant="outline"
                    size="sm"
                  >
                    إلغاء التحديد
                  </Button>
                </div>
              )}
            </div>
          )}

          <div className="grid gap-4">
            {conversations.filter(c => c.status === 'pending').map((conversation) => (
              <Card key={conversation.id} className={selectedConversations.includes(conversation.id) ? "ring-2 ring-primary" : ""}>
                <CardHeader>
                  <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-3">
                    <div className="flex items-start gap-3 flex-1">
                      <Checkbox
                        checked={selectedConversations.includes(conversation.id)}
                        onCheckedChange={() => toggleConversationSelection(conversation.id)}
                        className="mt-1"
                      />
                      <div className="flex-1">
                        <CardTitle className="flex items-center gap-2 text-lg">
                          <MessageCircle className="h-5 w-5" />
                          {conversation.title}
                        </CardTitle>
                        <CardDescription className="mt-1">{conversation.description}</CardDescription>
                      </div>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      <Badge variant={getStatusBadge(conversation.status).variant}>
                        {getStatusBadge(conversation.status).label}
                      </Badge>
                      <Badge variant="outline" className={getUrgencyColor(conversation.urgencyLevel || 'medium')}>
                        {conversation.urgencyLevel}
                      </Badge>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3">
                    <div className="flex flex-wrap gap-2 sm:gap-4 text-sm text-muted-foreground">
                      <span className="flex items-center gap-1">
                        <User className="h-4 w-4" />
                        {conversation.userMessages} رسائل عميل
                      </span>
                      <span className="flex items-center gap-1">
                        <Bot className="h-4 w-4" />
                        {conversation.agentMessages} رسائل وكيل
                      </span>
                      <span className="flex items-center gap-1">
                        <Clock className="h-4 w-4" />
                        {new Date(conversation.createdAt).toLocaleDateString('ar')}
                      </span>
                    </div>
                    <Button 
                      onClick={() => {
                        setSelectedConversation(conversation);
                        setShowAssignDialog(true);
                      }}
                      size="sm"
                      className="w-full sm:w-auto"
                    >
                      تعيين للمترجم
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="assigned" className="space-y-4">
          <div className="grid gap-4">
            {conversations.filter(c => ['assigned', 'in_progress'].includes(c.status)).map((conversation) => (
              <Card key={conversation.id}>
                <CardHeader>
                  <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-3">
                    <div className="flex-1">
                      <CardTitle className="flex items-center gap-2 text-lg">
                        <MessageCircle className="h-5 w-5" />
                        {conversation.title}
                      </CardTitle>
                      <CardDescription className="mt-1">{conversation.description}</CardDescription>
                    </div>
                    <Badge variant={getStatusBadge(conversation.status).variant}>
                      {getStatusBadge(conversation.status).label}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3 text-sm text-muted-foreground">
                    <div className="flex flex-col sm:flex-row gap-2 sm:gap-4">
                      <span>المترجم: {conversation.assignedTo}</span>
                      <span>النمط: {conversation.styleTagId}</span>
                      <span>{conversation.userMessages} رسائل للترجمة</span>
                    </div>
                    <span className="text-right sm:text-left">{new Date(conversation.createdAt).toLocaleDateString('ar')}</span>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="completed" className="space-y-4">
          <div className="grid gap-4">
            {conversations.filter(c => ['completed', 'reviewed'].includes(c.status)).map((conversation) => (
              <Card key={conversation.id}>
                <CardHeader>
                  <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-3">
                    <div className="flex-1">
                      <CardTitle className="flex items-center gap-2 text-lg">
                        <CheckCircle className="h-5 w-5 text-green-600" />
                        {conversation.title}
                      </CardTitle>
                      <CardDescription className="mt-1">{conversation.description}</CardDescription>
                    </div>
                    <Badge variant="default" className="bg-green-100 text-green-800">
                      {getStatusBadge(conversation.status).label}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3 text-sm text-muted-foreground">
                    <div className="flex flex-col sm:flex-row gap-2 sm:gap-4">
                      <span>المترجم: {conversation.assignedTo}</span>
                      <span>مكتمل في: {conversation.completedAt ? new Date(conversation.completedAt).toLocaleDateString('ar') : 'غير محدد'}</span>
                    </div>
                    <Button variant="outline" size="sm" className="w-full sm:w-auto">
                      عرض الترجمة
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>

      {/* Assignment Dialog */}
      <Dialog open={showAssignDialog} onOpenChange={setShowAssignDialog}>
        <DialogContent className="max-w-[95vw] sm:max-w-md">
          <DialogHeader>
            <DialogTitle>تعيين محادثة للمترجم</DialogTitle>
            <DialogDescription>
              اختر المترجم والنمط المطلوب لترجمة رسائل العميل فقط
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label>المترجم</Label>
              <Select value={selectedTranslator?.toString()} onValueChange={(value) => setSelectedTranslator(Number(value))}>
                <SelectTrigger>
                  <SelectValue placeholder="اختر المترجم" />
                </SelectTrigger>
                <SelectContent>
                  {translators.map((translator) => (
                    <SelectItem key={translator.id} value={translator.id.toString()}>
                      {translator.username}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label>نمط الترجمة (للعميل فقط)</Label>
              <Select value={selectedStyle?.toString()} onValueChange={(value) => setSelectedStyle(Number(value))}>
                <SelectTrigger>
                  <SelectValue placeholder="اختر النمط" />
                </SelectTrigger>
                <SelectContent>
                  {styleTags.map((style) => (
                    <SelectItem key={style.id} value={style.id.toString()}>
                      {style.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="bg-blue-50 p-3 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>ملاحظة:</strong> النمط المحدد سيؤثر فقط على ترجمة رسائل العميل. 
                رسائل الوكيل ستبقى كما هي لتدريب الذكاء الاصطناعي على الحسانية الأصيلة.
              </p>
            </div>

            <div className="flex flex-col sm:flex-row justify-end gap-2">
              <Button variant="outline" onClick={() => setShowAssignDialog(false)} className="w-full sm:w-auto">
                إلغاء
              </Button>
              <Button onClick={handleAssign} disabled={assignMutation.isPending} className="w-full sm:w-auto">
                {assignMutation.isPending ? "جاري التعيين..." : "تعيين المحادثة"}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Bulk Assignment Dialog */}
      <Dialog open={showBulkAssignDialog} onOpenChange={setShowBulkAssignDialog}>
        <DialogContent className="max-w-[95vw] sm:max-w-md">
          <DialogHeader>
            <DialogTitle>تعيين محادثات متعددة للمترجم</DialogTitle>
            <DialogDescription>
              تعيين {selectedConversations.length} محادثة للمترجم المحدد
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label>المترجم</Label>
              <Select value={bulkTranslator?.toString()} onValueChange={(value) => setBulkTranslator(Number(value))}>
                <SelectTrigger>
                  <SelectValue placeholder="اختر المترجم" />
                </SelectTrigger>
                <SelectContent>
                  {translators.map((translator) => (
                    <SelectItem key={translator.id} value={translator.id.toString()}>
                      {translator.username}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label>نمط الترجمة (للعميل فقط)</Label>
              <Select value={bulkStyle?.toString()} onValueChange={(value) => setBulkStyle(Number(value))}>
                <SelectTrigger>
                  <SelectValue placeholder="اختر النمط" />
                </SelectTrigger>
                <SelectContent>
                  {styleTags.map((style) => (
                    <SelectItem key={style.id} value={style.id.toString()}>
                      {style.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="bg-amber-50 p-3 rounded-lg">
              <p className="text-sm text-amber-800">
                <strong>تنبيه:</strong> سيتم تعيين جميع المحادثات المحددة ({selectedConversations.length}) 
                للمترجم والنمط المحدد. هذا الإجراء لا يمكن التراجع عنه.
              </p>
            </div>

            <div className="flex flex-col sm:flex-row justify-end gap-2">
              <Button variant="outline" onClick={() => setShowBulkAssignDialog(false)} className="w-full sm:w-auto">
                إلغاء
              </Button>
              <Button onClick={handleBulkAssign} disabled={bulkAssignMutation.isPending} className="w-full sm:w-auto">
                {bulkAssignMutation.isPending ? "جاري التعيين..." : `تعيين ${selectedConversations.length} محادثة`}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
